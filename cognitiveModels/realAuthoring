# To run this sample, install the following modules.
# pip install azure-cognitiveservices-language-luis

# <Dependencies>
from azure.cognitiveservices.language.luis.authoring import LUISAuthoringClient
from azure.cognitiveservices.language.luis.authoring.models import ApplicationCreateObject
from azure.cognitiveservices.language.luis.runtime import LUISRuntimeClient
from msrest.authentication import CognitiveServicesCredentials
from functools import reduce

import json, time, uuid
# </Dependencies>

def quickstart(): 

	# <VariablesYouChange>
    #Créez des variables pour stocker votre clé de création et les noms de vos ressources.
	authoringKey = 'a096ee399422437b8cfec5816d91f92e'
	authoringEndpoint = 'https://westeurope.api.cognitive.microsoft.com/'
	predictionKey = '5fc4ccbb7dc04aa094934613afb5f55f'
	predictionEndpoint = 'https://p10luisresource.cognitiveservices.azure.com/'
	# </VariablesYouChange>

	# <VariablesYouDontNeedToChangeChange>
	# We use a UUID to avoid name collisions.
    #Créez des variables pour stocker vos points de terminaison, le nom de l'application, la version et le nom de l'intention.
	appName = " FlyMe " + str(uuid.uuid4())
	versionId = "0.1"
	intentName = "BookFlight"
	# </VariablesYouDontNeedToChangeChange>

	# <AuthoringCreateClient>
    #Authentifier le client: Créez un objet CognitiveServicesCredentials avec votre clé et utilisez-le avec votre point de terminaison pour créer un objet LUISAuthoringClient.
	client = LUISAuthoringClient(authoringEndpoint, CognitiveServicesCredentials(authoringKey))
	# </AuthoringCreateClient>

	# Create app
	app_id = create_app(client, appName, versionId)

	# <AddIntent>
	client.model.add_intent(app_id, versionId, intentName)
	# </AddIntent>
	
	# Add Entities
	add_entities(client, app_id, versionId)
	
	# Add labeled examples
	add_labeled_examples(client,app_id, versionId, intentName)

	# <TrainAppVersion>
	client.train.train_version(app_id, versionId)
	waiting = True
	while waiting:
		info = client.train.get_status(app_id, versionId)

		# get_status returns a list of training statuses, one for each model. Loop through them and make sure all are done.
		waiting = any(map(lambda x: 'Queued' == x.details.status or 'InProgress' == x.details.status, info))
		if waiting:
			print ("Waiting 10 seconds for training to complete...")
			time.sleep(10)
		else: 
			print ("trained")
			waiting = False
	# </TrainAppVersion>
	
	# <PublishVersion>
	# Mark the app as public so we can query it using any prediction endpoint.
	# Note: For production scenarios, you should instead assign the app to your own LUIS prediction endpoint. See:
	# https://docs.microsoft.com/en-gb/azure/cognitive-services/luis/luis-how-to-azure-subscription#assign-a-resource-to-an-app
	client.apps.update_settings(app_id, is_public=True)

	responseEndpointInfo = client.apps.publish(app_id, versionId, is_staging=False)
	# </PublishVersion>
	
	# <PredictionCreateClient>
	runtimeCredentials = CognitiveServicesCredentials(predictionKey)
	clientRuntime = LUISRuntimeClient(endpoint=predictionEndpoint, credentials=runtimeCredentials)
	# </PredictionCreateClient>

    # <QueryPredictionEndpoint>
    # Production == slot name
	predictionRequest = { "query" : "Hello i'd like to fly from Paris to New-York on March 18, 2022" }
	
	predictionResponse = clientRuntime.prediction.get_slot_prediction(app_id, "Production", predictionRequest)
	print("Top intent: {}".format(predictionResponse.prediction.top_intent))
	print("Sentiment: {}".format (predictionResponse.prediction.sentiment))
	print("Intents: ")

	for intent in predictionResponse.prediction.intents:
		print("\t{}".format (json.dumps (intent)))
	print("Entities: {}".format (predictionResponse.prediction.entities))
    # </QueryPredictionEndpoint>

	# Clean up resources.
#	print ("Deleting app...")
#	client.apps.delete(app_id)
#	print ("App deleted.")

def create_app(client, appName, versionId):

    # <AuthoringCreateApplication>
	# define app basics
    #description = "This is my first dummy LUIS application"
    #Une application LUIS stocke le modèle de traitement en langage naturel contenant les intentions, les entités et les exemples d'énoncés.
	appDefinition = ApplicationCreateObject (name=appName, initial_version_id=versionId, culture='en-us')

	# create app
    #Créez une méthode add pour l’objet AppsOperation afin de créer l’application. Le nom et la culture de la langue sont des propriétés obligatoires.

	app_id = client.apps.add(appDefinition)

	# get app id - necessary for all other changes
	print("Created LUIS app with ID {}".format(app_id))
	# </AuthoringCreateApplication>
	
	return app_id
	
def add_entities(client, app_id, versionId):

	# <AuthoringAddEntities>
	# Add Prebuilt entity
	departure_date_name ='Departure date' 
#	departure_date_id = client.model.add_prebuilt(app_id, versionId, prebuilt_extractor_names=["datetimeV2"])
	departure_date_id = client.model.add_entity(app_id, versionId, departure_date_name)
	print("{} prebuilt entity created with id {}".format(departure_date_name, departure_date_id))

	destination_date_name ='Destination date' 
#	destination_date_id = client.model.add_prebuilt(app_id, versionId, prebuilt_extractor_names=["datetimeV2"])
	destination_date_id = client.model.add_entity(app_id, versionId, destination_date_name)
	print("{} prebuilt entity created with id {}".format(destination_date_name, destination_date_id))

	# define machine-learned entity
	# Add information into the model
	print("\nWe'll create two new entities.")
	print("The \"Departure\" simple entity will hold the flight departure.")
	print("The \"Destination\" simple entity will hold the flight destination.")
	print("The \"Class\" hierarchical entity will accept \"First\", \"Business\" and \"Economy\" values.")

	departure_name = "Departure"
	departure_id = client.model.add_entity(app_id, versionId, departure_name)
	print("{} simple entity created with id {}".format(departure_name, departure_id))
	
	destination_name = "Destination"
	destination_id = client.model.add_entity(app_id, versionId, destination_name)
	print("{} simple entity created with id {}".format(destination_name, destination_id))


#	class_name = "Class"
#	class_id = client.model.add_hierarchical_entity( app_id, versionId, name=class_name, children=["First", "Business", "Economy"] )
#	print("{} hierarchical entity created with id {}".format( class_name, class_id))

	

def get_examples(json_file):
    with open(json_file, "r") as handle:
        file = json.load(handle)
    return file

def add_labeled_examples(client, app_id, versionId, intentName):

	# <AuthoringAddLabeledExamples>
    # Define labeled example
	labeledExampleUtteranceWithMLEntity = get_examples("../data/train.json")
	print("Labeled Example Utterance:   loaded")
 #   print("Labeled Example Utterance:", labeledExampleUtteranceWithMLEntity)

    # Add an example for the entity.
    # Enable nested children to allow using multiple models with the same name.
	# The quantity subentity and the phraselist could have the same exact name if this is set to True
	for labeledExampleUtterance in labeledExampleUtteranceWithMLEntity:
			client.examples.add(app_id, versionId, labeledExampleUtterance, { "enableNestedChildren": False })
	print("client.examples = Labeled Example Utterance:   added")	
	# </AuthoringAddLabeledExamples>
	
# <AuthoringSortModelObject>
def get_grandchild_id(model, childName, grandChildName):
	
	theseChildren = next(filter((lambda child: child.name == childName), model.children))
	theseGrandchildren = next(filter((lambda child: child.name == grandChildName), theseChildren.children))
	
	grandChildId = theseGrandchildren.id
	
	return grandChildId
# </AuthoringSortModelObject>

quickstart()